{"ast":null,"code":"import { FetchResponse } from './fetch_response';\nimport { RequestInterceptor } from './request_interceptor';\nimport { getCookie, compact, metaContent, stringEntriesFromFormData, mergeEntries } from './lib/utils';\nexport class FetchRequest {\n  constructor(method, url) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.method = method;\n    this.options = options;\n    this.originalUrl = url.toString();\n  }\n  async perform() {\n    try {\n      const requestInterceptor = RequestInterceptor.get();\n      if (requestInterceptor) {\n        await requestInterceptor(this);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    const response = new FetchResponse(await window.fetch(this.url, this.fetchOptions));\n    if (response.unauthenticated && response.authenticationURL) {\n      return Promise.reject(window.location.href = response.authenticationURL);\n    }\n    if (response.ok && response.isTurboStream) {\n      await response.renderTurboStream();\n    }\n    return response;\n  }\n  addHeader(key, value) {\n    const headers = this.additionalHeaders;\n    headers[key] = value;\n    this.options.headers = headers;\n  }\n  get fetchOptions() {\n    return {\n      method: this.method.toUpperCase(),\n      headers: this.headers,\n      body: this.formattedBody,\n      signal: this.signal,\n      credentials: 'same-origin',\n      redirect: this.redirect\n    };\n  }\n  get headers() {\n    return compact(Object.assign({\n      'X-Requested-With': 'XMLHttpRequest',\n      'X-CSRF-Token': this.csrfToken,\n      'Content-Type': this.contentType,\n      Accept: this.accept\n    }, this.additionalHeaders));\n  }\n  get csrfToken() {\n    return getCookie(metaContent('csrf-param')) || metaContent('csrf-token');\n  }\n  get contentType() {\n    if (this.options.contentType) {\n      return this.options.contentType;\n    } else if (this.body == null || this.body instanceof window.FormData) {\n      return undefined;\n    } else if (this.body instanceof window.File) {\n      return this.body.type;\n    }\n    return 'application/json';\n  }\n  get accept() {\n    switch (this.responseKind) {\n      case 'html':\n        return 'text/html, application/xhtml+xml';\n      case 'turbo-stream':\n        return 'text/vnd.turbo-stream.html, text/html, application/xhtml+xml';\n      case 'json':\n        return 'application/json, application/vnd.api+json';\n      default:\n        return '*/*';\n    }\n  }\n  get body() {\n    return this.options.body;\n  }\n  get query() {\n    const originalQuery = (this.originalUrl.split('?')[1] || '').split('#')[0];\n    const params = new URLSearchParams(originalQuery);\n    let requestQuery = this.options.query;\n    if (requestQuery instanceof window.FormData) {\n      requestQuery = stringEntriesFromFormData(requestQuery);\n    } else if (requestQuery instanceof window.URLSearchParams) {\n      requestQuery = requestQuery.entries();\n    } else {\n      requestQuery = Object.entries(requestQuery || {});\n    }\n    mergeEntries(params, requestQuery);\n    const query = params.toString();\n    return query.length > 0 ? `?${query}` : '';\n  }\n  get url() {\n    return this.originalUrl.split('?')[0].split('#')[0] + this.query;\n  }\n  get responseKind() {\n    return this.options.responseKind || 'html';\n  }\n  get signal() {\n    return this.options.signal;\n  }\n  get redirect() {\n    return this.options.redirect || 'follow';\n  }\n  get additionalHeaders() {\n    return this.options.headers || {};\n  }\n  get formattedBody() {\n    const bodyIsAString = Object.prototype.toString.call(this.body) === '[object String]';\n    const contentTypeIsJson = this.headers['Content-Type'] === 'application/json';\n    if (contentTypeIsJson && !bodyIsAString) {\n      return JSON.stringify(this.body);\n    }\n    return this.body;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}