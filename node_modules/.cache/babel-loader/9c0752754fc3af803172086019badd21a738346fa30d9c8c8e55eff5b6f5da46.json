{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport logger from \"./logger\";\n\n// Responsible for ensuring channel subscribe command is confirmed, retrying until confirmation is received.\n// Internal class, not intended for direct user manipulation.\nvar SubscriptionGuarantor = /*#__PURE__*/function () {\n  function SubscriptionGuarantor(subscriptions) {\n    _classCallCheck(this, SubscriptionGuarantor);\n    this.subscriptions = subscriptions;\n    this.pendingSubscriptions = [];\n  }\n  _createClass(SubscriptionGuarantor, [{\n    key: \"guarantee\",\n    value: function guarantee(subscription) {\n      if (this.pendingSubscriptions.indexOf(subscription) == -1) {\n        logger.log(\"SubscriptionGuarantor guaranteeing \".concat(subscription.identifier));\n        this.pendingSubscriptions.push(subscription);\n      } else {\n        logger.log(\"SubscriptionGuarantor already guaranteeing \".concat(subscription.identifier));\n      }\n      this.startGuaranteeing();\n    }\n  }, {\n    key: \"forget\",\n    value: function forget(subscription) {\n      logger.log(\"SubscriptionGuarantor forgetting \".concat(subscription.identifier));\n      this.pendingSubscriptions = this.pendingSubscriptions.filter(function (s) {\n        return s !== subscription;\n      });\n    }\n  }, {\n    key: \"startGuaranteeing\",\n    value: function startGuaranteeing() {\n      this.stopGuaranteeing();\n      this.retrySubscribing();\n    }\n  }, {\n    key: \"stopGuaranteeing\",\n    value: function stopGuaranteeing() {\n      clearTimeout(this.retryTimeout);\n    }\n  }, {\n    key: \"retrySubscribing\",\n    value: function retrySubscribing() {\n      var _this = this;\n      this.retryTimeout = setTimeout(function () {\n        if (_this.subscriptions && typeof _this.subscriptions.subscribe === \"function\") {\n          _this.pendingSubscriptions.map(function (subscription) {\n            logger.log(\"SubscriptionGuarantor resubscribing \".concat(subscription.identifier));\n            _this.subscriptions.subscribe(subscription);\n          });\n        }\n      }, 500);\n    }\n  }]);\n  return SubscriptionGuarantor;\n}();\nexport default SubscriptionGuarantor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}